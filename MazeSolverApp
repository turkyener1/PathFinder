package package1;
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.LinkedList;
import java.util.Queue;

public class MazeSolverApp extends JFrame {
    private JPanel mainPanel;
    private JButton drawGridButton;
    private JPanel mazePanel;

    private int x;
    private int y;
    private int startX = -1;
    private int startY = -1;
    private int endX = -1;
    private int endY = -1;
    private JLabel[][] labels; // Labirent hücrelerini depolamak için 2D dizi

    public MazeSolverApp() {
        setTitle("Maze Solver");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    
        mainPanel = new JPanel(new BorderLayout());

       
        drawGridButton = new JButton("Izgara Çiz");
        drawGridButton.addActionListener(e -> drawGrid());

    
        mainPanel.add(drawGridButton, BorderLayout.NORTH);


        add(mainPanel);
        setVisible(true);
    }

    private void drawGrid() {
        try {
            x = Integer.parseInt(JOptionPane.showInputDialog(null, "y değerini girin: "));
            y = Integer.parseInt(JOptionPane.showInputDialog(null, "x değerini girin: "));

            // Labirent panelini oluştur ve düzenini GridLayout olarak ayarla
            mazePanel = new JPanel(new GridLayout(x, y));

            // Labirent hücrelerini temsil etmek için JLabel 2D dizisini başlat
            labels = new JLabel[x][y];

        
            for (int i = 0; i < x; i++) {
                for (int j = 0; j < y; j++) {
                    labels[i][j] = new JLabel();
                    labels[i][j].setOpaque(true);
                    labels[i][j].setBackground(Color.WHITE);
                    labels[i][j].setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));

                  
                    int currentX = i; // Geçerli X koordinatını sakla
                    int currentY = j; // Geçerli Y koordinatını sakla
                    labels[i][j].addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            hücreyeTıklandı(e, currentX, currentY);
                        }
                    });

                   
                    labels[i][j].setFocusable(true);

                  
                    mazePanel.add(labels[i][j]);
                }
            }

           
            int spacing = 10; 
            mazePanel.setBorder(BorderFactory.createEmptyBorder(spacing, spacing, spacing, spacing));

         
            mainPanel.removeAll();
            mainPanel.add(mazePanel, BorderLayout.CENTER);
            mainPanel.revalidate();
            mainPanel.repaint();

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Geçersiz giriş. Lütfen x ve y için tamsayı değerlerini girin.");
        }
    }

   
    private void hücreyeTıklandı(MouseEvent evt, int currentX, int currentY) {
      
        if (startX == -1 || startY == -1 || endX == -1 || endY == -1) {
          
            if (SwingUtilities.isLeftMouseButton(evt)) {
                if (startX == -1 && startY == -1) {
                    startX = currentX;
                    startY = currentY;
                    labels[currentX][currentY].setBackground(Color.GREEN);
                }
            }
         
            else if (SwingUtilities.isRightMouseButton(evt)) {
                if (endX == -1 && endY == -1) {
                    endX = currentX;
                    endY = currentY;
                    labels[currentX][currentY].setBackground(Color.RED);

                   
                    JOptionPane.showMessageDialog(null, "Şimdi engeller eklemek için labirent hücrelerine tıklayın (Siyah renk).\n" +
                            "Engelleri ekledikten sonra, kısa yolu bulmak için labirentin herhangi bir yerine sağ tıklayın.");
                }
            }
        } else {
            
            if (SwingUtilities.isLeftMouseButton(evt)) {
                if (!labels[currentX][currentY].getBackground().equals(Color.GREEN) &&
                        !labels[currentX][currentY].getBackground().equals(Color.RED)) {
                    labels[currentX][currentY].setBackground(Color.BLACK);
                }
            } else if (SwingUtilities.isRightMouseButton(evt)) {
                kısaYoluBul();
            }
        }
    }

   
    private void kısaYoluBul() {
   
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                if (!labels[i][j].getBackground().equals(Color.BLACK)) {
                    labels[i][j].setBackground(Color.WHITE);
                }
            }
        }

       
        Queue<int[]> queue = new LinkedList<>();
    
        boolean[][] visited = new boolean[x][y];
        queue.offer(new int[]{startX, startY});
        visited[startX][startY] = true;

       
        int[] dx = {-1, 1, 0, 0, -1, -1, 1, 1};
        int[] dy = {0, 0, -1, 1, -1, 1, -1, 1};

        // Her hücrenin ebeveynini kısa yolu yeniden oluşturmak için sakla
        int[][] parent = new int[x][y];
        parent[startX][startY] = -1; // Başlangıç noktasını yolun kökü olarak işaretle

    
        boolean kısaYolBulundu = false;
        while (!queue.isEmpty()) {
            int[] currentCell = queue.poll();
            int currentX = currentCell[0];
            int currentY = currentCell[1];

            if (currentX == endX && currentY == endY) {
                // Bitiş noktasına ulaşıldı, döngüden çık
                kısaYolBulundu = true;
                break;
            }

            // Komşuları kontrol et (çapraz hareketler dahil)
            for (int i = 0; i < 8; i++) {
                int nextX = currentX + dx[i];
                int nextY = currentY + dy[i];

                // Sonraki hücrenin ızgara sınırları içinde, ziyaret edilmemiş ve engel (siyah hücre) değilse
                if (nextX >= 0 && nextX < x && nextY >= 0 && nextY < y && !visited[nextX][nextY] &&
                        !labels[nextX][nextY].getBackground().equals(Color.BLACK)) {
                    queue.offer(new int[]{nextX, nextY});
                    visited[nextX][nextY] = true;
                    parent[nextX][nextY] = currentX * y + currentY; // Sonraki hücrenin ebeveynini sakla
                }
            }
        }

        // Kısa yolu tekrar oluştur ve turkuaz (cyan) renkle işaretle
        if (kısaYolBulundu) {
            int currentX = endX;
            int currentY = endY;
            while (parent[currentX][currentY] != -1) {
                int parentX = parent[currentX][currentY] / y;
                int parentY = parent[currentX][currentY] % y;
                if (!labels[parentX][parentY].getBackground().equals(Color.GREEN) &&
                        !labels[parentX][parentY].getBackground().equals(Color.RED) &&
                        !labels[parentX][parentY].getBackground().equals(Color.BLACK)) {
                    labels[parentX][parentY].setBackground(Color.CYAN);
                }
                currentX = parentX;
                currentY = parentY;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Başlangıç noktasından bitiş noktasına kısa yol bulunamadı.");
        }
       
        labels[startX][startY].setBackground(Color.GREEN);
        labels[endX][endY].setBackground(Color.RED);

    
        startX = -1;
        startY = -1;
        endX = -1;
        endY = -1;
    }


    public static void main(String[] args) {
        SwingUtilities.invokeLater(MazeSolverApp::new);
    }
}


